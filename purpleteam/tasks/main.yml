- name: Ensure dependencies are present.
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - python3-debian
      - gnupg2
    state: present

- name: Download NodeSource's signing key.
  ansible.builtin.get_url:
    url: https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key
    dest: /etc/apt/signing-key-nodesource-repo.asc
    owner: root
    group: root
    mode: '0444'
  register: node_signing_key

- name: Add NodeSource repositories for Node.js.
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by={{ node_signing_key.dest }}] https://deb.nodesource.com/node_21.x nodistro main"
    state: present
  register: node_repo

- name: Update apt cache if repo was added.
  ansible.builtin.apt: update_cache=yes
  when: node_repo is changed
  tags: ['skip_ansible_lint']

- name: Ensure Node.js and npm are installed.
  ansible.builtin.apt:
    name: nodejs
    state: present

- name: Ensure caldera dependencies are present
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  with_items: "{{ caldera_pkg }}"
  register: pkg_result
  until: pkg_result is success

- name: Ensure caldera user exists
  ansible.builtin.user:
    name: "{{ caldera_user }}"
    home: "{{ caldera_home }}"
    shell: /bin/bash

- name: Ensure recent pip & setuptools in virtualenv
  ansible.builtin.pip:
    name: "{{ item }}"
    state: present
    virtualenv: "{{ caldera_home }}/env-caldera"
    virtualenv_python: "{{ python }}"
  with_items:
    - pip
    - setuptools
  register: pkg_result
  until: pkg_result is success

- name: Clone caldera repo
  ansible.builtin.git:
    repo: https://github.com/mitre/caldera.git
    dest: "{{ caldera_rootdir }}"
    version: "{{ caldera_version }}"
    recursive: true
  become: yes
  become_user: "{{ caldera_user }}"
  register: result

- name: Clone magma repo
  ansible.builtin.git:
    repo: https://github.com/mitre/magma.git
    dest: "{{ caldera_rootdir }}/plugins/magma"
    version: "{{ magma_version }}"
    recursive: true
    update: true
    force: true
  become: yes
  become_user: "{{ caldera_user }}"

- name: Install caldera pip requirements
  ansible.builtin.pip:
    requirements: "{{ caldera_rootdir }}/requirements.txt"
    virtualenv: "{{ caldera_home }}/env-caldera"
    virtualenv_python: "{{ python }}"
  register: pkg_result
  until: pkg_result is success

- name: Identify other pip requirements
  ansible.builtin.find:
    paths: "{{ caldera_rootdir }}/plugins"
    patterns: 'requirements.txt'
    recurse: yes
  register: requirements

- name: Install other pip requirements
  ansible.builtin.pip:
    requirements: "{{ item.path }}"
    virtualenv: "{{ caldera_home }}/env-caldera"
    virtualenv_python: "{{ python }}"
  register: pkg_result
  until: pkg_result is success
  loop: "{{ requirements.files }}"

- name: Copy default config to local config
  ansible.builtin.copy:
    src: "{{ caldera_rootdir }}/conf/default.yml"
    dest: "{{ caldera_rootdir }}/conf/local.yml"
    owner: "{{ caldera_user }}"
    group: "{{ caldera_user }}"
    mode: "0644"
    remote_src: true

- name: Add plugin to conf
  ansible.builtin.lineinfile:
    path: "{{ caldera_rootdir }}/conf/local.yml"
    insertafter: 'plugins:'
    line: "- {{ item }}"
  with_items: "{{ plugins }}"

- name: Install frontend dependencies
  community.general.npm:
    path: "{{ caldera_rootdir }}/plugins/magma/"

- name: Copy default magma env template to prod
  ansible.builtin.copy:
    src: "{{ caldera_rootdir }}/plugins/magma/.env.template"
    dest: "{{ caldera_rootdir }}/plugins/magma/.env"
    owner: "{{ caldera_user }}"
    group: "{{ caldera_user }}"
    mode: "0644"
    remote_src: true

- name: Allow all IPs to connect to magma
  ansible.builtin.lineinfile:
    path: "{{ caldera_rootdir }}/plugins/magma/.env"
    regexp: "^VITE_CALDERA_URL"
    line: "VITE_CALDERA_URL=http://"

- name: Build frontend
  ansible.builtin.command: npm run build
  args:
    chdir: "{{ caldera_rootdir }}/plugins/magma/"
    creates: "{{ caldera_rootdir }}/plugins/magma/src/plugins/emu/emu.vue"

- name: Clone emu
  ansible.builtin.git:
    repo: https://github.com/mitre/emu.git
    dest: "{{ caldera_rootdir }}/plugins/emu"
    version: "{{ emu_version }}"
    recursive: true
  become: yes
  become_user: "{{ caldera_user }}"
  register: result

- name: Clone emulation plans
  ansible.builtin.git:
    repo: https://github.com/center-for-threat-informed-defense/adversary_emulation_library
    dest: "{{ caldera_rootdir }}/plugins/emu/data/adversary-emulation-plans"
    version: "{{ citd_version }}"
    recursive: true
  become: yes
  become_user: "{{ caldera_user }}"
  register: result

- name: Overwrite download_payloads.sh
  ansible.builtin.copy:
    src: files/download_payloads.sh
    dest: "{{ caldera_rootdir }}/plugins/emu/download_payloads.sh"
    owner: "{{ caldera_user }}"
    group: "{{ caldera_user }}"
    mode: "0755"

- name: Run download payloads script
  ansible.builtin.command: "bash download_payloads.sh"
  args:
    chdir: "{{ caldera_rootdir }}/plugins/emu/"
    creates: "{{ caldera_rootdir }}/plugins/emu/AdFind.exe"

- name: Deploy modified wizard_spider plan
  ansible.builtin.copy:
    src: wizard_spider.yaml
    dest: "{{ caldera_rootdir }}/plugins/emu/data/adversary-emulation-plans/wizard_spider/Emulation_Plan/yaml/wizard_spider.yaml"
    owner: "{{ caldera_user }}"
    group: "{{ caldera_user }}"
    mode: "0755"

- name: Deploy modified menuPass plan
  ansible.builtin.copy:
    src: menupass.yaml
    dest: "{{ caldera_rootdir }}/plugins/emu/data/adversary-emulation-plans/menu_pass/Emulation_Plan/yaml/menupass.yaml"
    owner: "{{ caldera_user }}"
    group: "{{ caldera_user }}"
    mode: "0755"

- name: Deploy modified sandworm plan
  ansible.builtin.copy:
    src: sandworm.yaml
    dest: "{{ caldera_rootdir }}/plugins/emu/data/adversary-emulation-plans/sandworm/Emulation_Plan/yaml/sandworm.yaml"
    owner: "{{ caldera_user }}"
    group: "{{ caldera_user }}"
    mode: "0755"

- name: Create menupass web server directory
  ansible.builtin.file:
    path: "/tmp/menupass"
    state: directory
    owner: "{{ caldera_user }}"
    group: "{{ caldera_user }}"
    mode: "0755"

- name: Create menupass exfil directory
  ansible.builtin.file:
    path: "/tmp/exfil"
    state: directory
    owner: "{{ caldera_user }}"
    group: "{{ caldera_user }}"
    mode: "0755"

- name: Deploy menupass binaries
  ansible.builtin.copy:
    src: menupass_binaries.zip
    dest: "/tmp/menupass/YmluYXJpZXM="
    owner: "{{ caldera_user }}"
    group: "{{ caldera_user }}"
    mode: "0755"

- name: Install caldera systemd configuration
  notify: Reload systemd
  ansible.builtin.template:
    src: systemd-caldera.service.j2
    dest: /lib/systemd/system/caldera.service
    mode: '0644'
    backup: yes
  register: systemd_caldera

- name: Install menupass-webserver systemd configuration
  notify: Reload systemd
  ansible.builtin.template:
    src: menupass-webserver.service.j2
    dest: /lib/systemd/system/menupass-webserver.service
    mode: '0644'
    backup: yes
  register: systemd_menupass

- name: Enable and start caldera systemd service
  ansible.builtin.service:
    name: caldera
    enabled: yes
    state: 'started'

- name: Enable and start menupass webserver systemd service
  ansible.builtin.service:
    name: menupass-webserver
    enabled: yes
    state: 'started'
